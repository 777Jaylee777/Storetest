var Logger_1 = require('./Logger');
var Recipe_1 = require('./Recipe');
var Task_1 = require('./Task');
var gulp_util_1 = require('gulp-util');
var RecipeLoader = (function () {
    function RecipeLoader(info) {
        this.recipeInfo = info;
    }
    RecipeLoader.registerTasks = function (gulp) {
        var _this = this;
        this.taskFamilies.forEach(function (family) {
            _this.clearOptionalDependencies(family);
            _this.logTaskFamily(family);
            _this.registerTasksWithGulp(family, gulp);
        });
    };
    RecipeLoader.logTaskFamily = function (family) {
        Logger_1.default.log(gulp_util_1.colors.yellow('Tasks:'), gulp_util_1.colors.yellow(family[0].name), gulp_util_1.colors.grey('[', family.map(function (f) { return f.name; }).join(' | '), ']'));
    };
    RecipeLoader.clearOptionalDependencies = function (tasks) {
        tasks.forEach(function (task) {
            task.deps = task.deps.map(function (dep) {
                if (dep.indexOf('?') !== 0) {
                    return dep;
                }
                dep = dep.substring(1);
                return Task_1.Task.get(dep) ? dep : null;
            }).filter(function (dep) { return !!dep; });
        });
    };
    RecipeLoader.registerTasksWithGulp = function (taskFamily, gulp) {
        var alias = taskFamily._ALIAS_;
        taskFamily.forEach(function (task) {
            gulp.task(task.name, task.deps, task.action);
            if (alias) {
                gulp.task(task.name.replace(alias.target, alias.name), [task.name]);
            }
        });
    };
    RecipeLoader.prototype.load = function () {
        var recipe = this.loadRecipe();
        var taskFamily = this.parse(recipe);
        RecipeLoader.taskFamilies.push(taskFamily);
    };
    RecipeLoader.prototype.loadRecipe = function () {
        var definition = require(this.recipeInfo.path);
        if (typeof definition === 'function') {
            // there is no formula - action function is exported directly.
            // So, wrap it in an IRecipeDefinition object
            definition = {
                formula: {},
                action: definition
            };
        }
        return new Recipe_1.Recipe(this.finalName(), definition.formula, definition.action);
    };
    RecipeLoader.prototype.parse = function (recipe) {
        var _this = this;
        var task = new Task_1.Task({
            name: recipe.name,
            deps: recipe.getDependencies(),
            config: recipe.formula,
            action: recipe.action
        });
        var taskWithoutExtDependencies = new Task_1.Task({
            name: recipe.name + '.',
            deps: recipe.getDependencies(true),
            config: recipe.formula,
            action: recipe.action
        });
        var taskFamily = recipe.children.reduce(function (family, child) {
            return family.concat(_this.parse(child));
        }, [task, taskWithoutExtDependencies]);
        taskFamily._ALIAS_ = this.recipeInfo.originQualifier ? {
            name: this.recipeInfo.originQualifier + "/" + this.recipeInfo.name,
            target: this.finalName()
        } : null;
        return taskFamily;
    };
    RecipeLoader.prototype.finalName = function () {
        return this.recipeInfo.nameOverride ?
            (typeof this.recipeInfo.nameOverride === 'function' ?
                this.recipeInfo.nameOverride(this.recipeInfo.name) :
                this.recipeInfo.nameOverride) :
            this.recipeInfo.name;
    };
    RecipeLoader.taskFamilies = [];
    return RecipeLoader;
})();
exports.RecipeLoader = RecipeLoader;
