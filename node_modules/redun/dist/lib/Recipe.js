var _ = require('lodash');
var Recipe = (function () {
    function Recipe(name, formula, action, parent) {
        this.formula = null;
        this.action = null;
        this.children = [];
        this.name = name;
        this.meta = {};
        if (_.isString(formula) || _.isArray(formula)) {
            // an alias task
            this.meta.deps = [].concat(formula);
            return;
        }
        else {
            this.formula = _.cloneDeep(formula);
        }
        this.recordNonInheritableProperties();
        this.applyInheritedProperties(parent);
        this.mergeParentProperties();
        this.moveChildren(action);
        this.renamePlusPrefixedProperties();
        this.moveMetaProperties();
        // it's an alias task, does not run on its own.
        this.action = this.children.length ? null : action;
    }
    Recipe.prototype.getDependencies = function (familyOnly) {
        var _this = this;
        if (familyOnly === void 0) { familyOnly = false; }
        var deps = [];
        if (this.meta.default) {
            this.meta.default = [].concat(this.meta.default); // ensure array
            deps = deps.concat(this.meta.default.map(function (name) { return _this.name + ':' + name; }));
        }
        else {
            deps = this.children.reduce(function (childTasks, child) {
                return childTasks.concat(child.name);
            }, deps);
        }
        if (!familyOnly && this.meta.deps) {
            deps = deps.concat(this.meta.deps);
        }
        if (familyOnly) {
            deps = deps.map(function (dep) { return _.endsWith(dep, '.') ? dep : dep + '.'; });
        }
        return deps;
    };
    Recipe.prototype.applyInheritedProperties = function (parent) {
        if (!parent || !parent.formula) {
            return;
        }
        for (var key in parent.formula) {
            if (parent.formula.hasOwnProperty(key) && !parent.nonInheritable[key] &&
                key.indexOf(':') !== 0 && key.indexOf('#') !== 0 &&
                !this.formula.hasOwnProperty(key)) {
                this.formula[key] = _.cloneDeep(parent.formula[key]);
            }
        }
    };
    Recipe.prototype.mergeParentProperties = function () {
        var formula = this.formula;
        Object.keys(formula).forEach(function (key) {
            if (key.indexOf('^') === 0) {
                var actualKey = key.substr(1);
                formula[actualKey] = _.merge(formula[actualKey], formula[key]);
                delete formula[key];
            }
        });
    };
    Recipe.prototype.moveChildren = function (action) {
        var _this = this;
        this.children = Object.keys(this.formula)
            .filter(function (key) { return key.indexOf(':') === 0; })
            .map(function (key) {
            var sub = _this.formula[key];
            delete _this.formula[key];
            return new Recipe(_this.name + key, sub, action, _this);
        });
    };
    Recipe.prototype.moveMetaProperties = function () {
        var formula = this.formula;
        for (var key in formula) {
            if (formula.hasOwnProperty(key) && key.indexOf('#') === 0) {
                this.meta[key.substr(1)] = formula[key];
                delete formula[key];
            }
        }
    };
    Recipe.prototype.recordNonInheritableProperties = function () {
        var _this = this;
        var formula = this.formula;
        this.nonInheritable = {};
        Object.keys(formula).filter(function (key) { return key.indexOf('-') === 0; })
            .forEach(function (key) {
            var actualKey = key.substr(1);
            if (formula.hasOwnProperty(actualKey)) {
                throw new Error(("Plan key " + actualKey + " for " + _this.name + " has been") +
                    " defined twice. Once on its own, and once as a" +
                    (" non-inheritable property (i.e. " + key + ")."));
            }
            _this.nonInheritable[actualKey] = true;
            formula[actualKey] = formula[key];
            delete formula[key];
        });
    };
    Recipe.prototype.renamePlusPrefixedProperties = function () {
        var formula = this.formula;
        for (var key in formula) {
            if (formula.hasOwnProperty(key) && key.indexOf('+') === 0) {
                formula[key.substr(1)] = formula[key];
                delete formula[key];
            }
        }
    };
    return Recipe;
})();
exports.Recipe = Recipe;
