var path_1 = require('path');
var Logger_1 = require('./lib/Logger');
var glob_1 = require('glob');
var RecipeLoader_1 = require('./lib/RecipeLoader');
var Redun = (function () {
    function Redun() {
        this.recipeRegistry = [];
    }
    Redun.prototype.add = function (glob, overrideNames, originQualifier) {
        var _this = this;
        if (overrideNames === void 0) { overrideNames = {}; }
        if (originQualifier === void 0) { originQualifier = null; }
        var globs = [].concat(glob); // always an array
        globs.forEach(function (g) {
            if (!path_1.isAbsolute(g)) {
                g = path_1.resolve(process.cwd(), g);
            }
            glob_1.sync(g).forEach(function (recipePath) {
                var name = path_1.basename(recipePath, path_1.extname(recipePath)).split('.')[0];
                _this.recipeRegistry.push({
                    path: recipePath,
                    name: name,
                    nameOverride: typeof overrideNames === 'function'
                        ? overrideNames : overrideNames[name],
                    originQualifier: originQualifier
                });
            });
        });
    };
    Redun.prototype.bootstrap = function (gulp) {
        if (gulp === void 0) { gulp = require('gulp'); }
        Logger_1.default.info('Loading recipes...');
        this.recipeRegistry.forEach(function (recipeInfo) {
            new RecipeLoader_1.RecipeLoader(recipeInfo).load();
        });
        Logger_1.default.info('Registering tasks...');
        RecipeLoader_1.RecipeLoader.registerTasks(gulp);
    };
    return Redun;
})();
exports.redun = new Redun();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.redun;
