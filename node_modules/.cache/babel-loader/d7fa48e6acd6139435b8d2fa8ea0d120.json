{"ast":null,"code":"export const addItem = itemToAdd => {\n  return {\n    type: 'cart/addItem',\n    payload: itemToAdd\n  };\n};\n\n// Create your changeItemQuantity action creator here.\n\nconst initialCart = {};\nexport const cartReducer = function () {\n  let cart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialCart;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'cart/addItem':\n      {\n        const {\n          name,\n          price\n        } = action.payload;\n\n        // if the item already exists, increase the quantity by 1, otherwise set it to 1\n        const quantity = cart[name] ? cart[name].quantity + 1 : 1;\n        const newItem = {\n          price,\n          quantity\n        };\n\n        // Add the new item to the cart (or replace it if it existed already)\n        return {\n          ...cart,\n          [name]: newItem\n        };\n      }\n    case 'cart/changeItemQuantity':\n      {\n        const {\n          name,\n          newQuantity\n        } = action.payload;\n        const itemToUpdate = cart[name];\n\n        // Create a copy of itemToUpdate and update the quantity prop.\n\n        // Return a copy of the cart with the updatedItem included.\n        return {};\n      }\n    default:\n      {\n        return cart;\n      }\n  }\n};","map":{"version":3,"names":["addItem","itemToAdd","type","payload","initialCart","cartReducer","cart","action","name","price","quantity","newItem","newQuantity","itemToUpdate"],"sources":["C:/Users/Jayle/Store/src/features/cart/cartSlice.js"],"sourcesContent":["export const addItem = (itemToAdd) => {\r\n    return {\r\n      type: 'cart/addItem',\r\n      payload: itemToAdd,\r\n    };\r\n  };\r\n  \r\n  // Create your changeItemQuantity action creator here.\r\n  \r\n  \r\n  const initialCart = {};\r\n  export const cartReducer = (cart = initialCart, action) => {\r\n    switch (action.type) {\r\n      case 'cart/addItem': {\r\n        const { name, price } = action.payload;\r\n  \r\n        // if the item already exists, increase the quantity by 1, otherwise set it to 1\r\n        const quantity = cart[name] ? cart[name].quantity + 1 : 1;\r\n        const newItem = { price, quantity };\r\n  \r\n        // Add the new item to the cart (or replace it if it existed already)\r\n        return { \r\n          ...cart, \r\n          [name]: newItem \r\n        };\r\n      }\r\n      case 'cart/changeItemQuantity': {\r\n        const { name, newQuantity } = action.payload;\r\n        const itemToUpdate = cart[name];\r\n  \r\n        // Create a copy of itemToUpdate and update the quantity prop.\r\n  \r\n        // Return a copy of the cart with the updatedItem included.\r\n        return {};\r\n      }\r\n      default: {\r\n        return cart;\r\n      }\r\n    }\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAIC,SAAS,IAAK;EAClC,OAAO;IACLC,IAAI,EAAE,cAAc;IACpBC,OAAO,EAAEF;EACX,CAAC;AACH,CAAC;;AAED;;AAGA,MAAMG,WAAW,GAAG,CAAC,CAAC;AACtB,OAAO,MAAMC,WAAW,GAAG,YAAgC;EAAA,IAA/BC,IAAI,uEAAGF,WAAW;EAAA,IAAEG,MAAM;EACpD,QAAQA,MAAM,CAACL,IAAI;IACjB,KAAK,cAAc;MAAE;QACnB,MAAM;UAAEM,IAAI;UAAEC;QAAM,CAAC,GAAGF,MAAM,CAACJ,OAAO;;QAEtC;QACA,MAAMO,QAAQ,GAAGJ,IAAI,CAACE,IAAI,CAAC,GAAGF,IAAI,CAACE,IAAI,CAAC,CAACE,QAAQ,GAAG,CAAC,GAAG,CAAC;QACzD,MAAMC,OAAO,GAAG;UAAEF,KAAK;UAAEC;QAAS,CAAC;;QAEnC;QACA,OAAO;UACL,GAAGJ,IAAI;UACP,CAACE,IAAI,GAAGG;QACV,CAAC;MACH;IACA,KAAK,yBAAyB;MAAE;QAC9B,MAAM;UAAEH,IAAI;UAAEI;QAAY,CAAC,GAAGL,MAAM,CAACJ,OAAO;QAC5C,MAAMU,YAAY,GAAGP,IAAI,CAACE,IAAI,CAAC;;QAE/B;;QAEA;QACA,OAAO,CAAC,CAAC;MACX;IACA;MAAS;QACP,OAAOF,IAAI;MACb;EAAC;AAEL,CAAC"},"metadata":{},"sourceType":"module"}