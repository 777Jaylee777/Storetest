{"ast":null,"code":"var accessToken;var userId;var clientId='9b98729b49374dfda220a7a453b7ae08';var redirectUri='http://Jay_Lee.surge.sh';var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}// check for access token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];accessToken=accessToken.replace(\"=\",\"\");// troubleshooting\nvar expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken=\"\";},expiresIn*1000);window.history.pushState(\"Access Token\",null,\"/\");return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},getCurrentUserId:function getCurrentUserId(){if(userId){return userId;}var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/me\",{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return userId;}).catch(function(err){console.log(\"Fetch problem line 47: \"+err.message);});},getUserPlaylists:function getUserPlaylists(){var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};return Promise.resolve(Spotify.getCurrentUserId()).then(function(response){userId=response;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:\"GET\"}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.items){return[];}return jsonResponse.items.map(function(playlist){return{playlistName:playlist.name,playlistId:playlist.id};});});});},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},// name = playlist name\nsavePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};return Promise.resolve(Spotify.getCurrentUserId()).then(function(response){userId=response;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:\"POST\",body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:\"POST\",body:JSON.stringify({uris:trackUris})});}).catch(function(err){console.log(\"Fetch problem: \",err.message);});});}};export default Spotify;","map":{"version":3,"names":["accessToken","userId","clientId","redirectUri","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","replace","expiresIn","Number","setTimeout","history","pushState","accessUrl","getCurrentUserId","fetch","headers","Authorization","then","response","json","jsonResponse","id","catch","err","console","log","message","getUserPlaylists","Promise","resolve","method","items","map","playlist","playlistName","name","playlistId","search","term","tracks","track","artist","artists","album","uri","savePlaylist","trackUris","length","body","JSON","stringify","uris"],"sources":["C:/Users/Jayle/jamming/src/util/Spotify.js"],"sourcesContent":["let accessToken;\r\nlet userId;\r\nconst clientId = '9b98729b49374dfda220a7a453b7ae08';\r\nconst redirectUri = 'http://Jay_Lee.surge.sh'\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken;\r\n      }\r\n      // check for access token match\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n  \r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        accessToken = accessToken.replace(\"=\", \"\"); // troubleshooting\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n        window.history.pushState(\"Access Token\", null, \"/\");\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    getCurrentUserId() {\r\n      if (userId) {\r\n        return userId;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n  \r\n      return fetch(\"https://api.spotify.com/v1/me\", {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      })\r\n        .then((response) => response.json())\r\n        .then((jsonResponse) => {\r\n          userId = jsonResponse.id;\r\n          return userId;\r\n        })\r\n        .catch(function (err) {\r\n          console.log(\"Fetch problem line 47: \" + err.message);\r\n        });\r\n    },\r\n  \r\n    getUserPlaylists() {\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      };\r\n  \r\n      return Promise.resolve(Spotify.getCurrentUserId()).then((response) => {\r\n        userId = response;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"GET\",\r\n        })\r\n          .then((response) => response.json())\r\n          .then((jsonResponse) => {\r\n            if (!jsonResponse.items) {\r\n              return [];\r\n            }\r\n            return jsonResponse.items.map((playlist) => ({\r\n              playlistName: playlist.name,\r\n              playlistId: playlist.id,\r\n            }));\r\n          });\r\n      });\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      })\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((jsonResponse) => {\r\n          if (!jsonResponse.tracks) {\r\n            return [];\r\n          }\r\n          return jsonResponse.tracks.items.map((track) => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri,\r\n          }));\r\n        });\r\n    },\r\n    // name = playlist name\r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      };\r\n      return Promise.resolve(Spotify.getCurrentUserId()).then((response) => {\r\n        userId = response;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: name }),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((jsonResponse) => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(\r\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n              {\r\n                headers: headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ uris: trackUris }),\r\n              }\r\n            );\r\n          })\r\n          .catch(function (err) {\r\n            console.log(\"Fetch problem: \", err.message);\r\n          });\r\n      });\r\n    },\r\n  };\r\n  \r\n  export default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module"}