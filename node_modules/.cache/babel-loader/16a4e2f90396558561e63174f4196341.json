{"ast":null,"code":"const clientId = '966170e49781462f9b0f4dff0b7fd5d7';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist[0].name,\n        uri: track.uri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`http://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/Users/Jayle/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId = '966170e49781462f9b0f4dff0b7fd5d7';\r\nconst redirectUri = 'http://localhost:3000/'\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n\r\ngetAccessToken() {\r\n if (accessToken) {\r\n     return accessToken;\r\n }\r\n     const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n     const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n     if(accessTokenMatch && expiresInMatch) {\r\n         accessToken = accessTokenMatch[1];\r\n         const expiresIn = Number(expiresInMatch[1]);\r\n\r\n         window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n         window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n     }  else {\r\n         const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n         window.location=accessUrl;\r\n     }\r\n },\r\n \r\n search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n        headers: {Authorization: `Bearer ${accessToken}`}\r\n    }).then(response => {\r\n        return response.json();\r\n    }).then(jsonResponse => {\r\n        if(!jsonResponse.tracks) {\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artist[0].name,\r\n            uri: track.uri\r\n        }))\r\n    })\r\n\r\n   },\r\n\r\nsavePlaylist(name, trackUris) {\r\nif(!name || ! trackUris.length) {\r\nreturn;\r\n   }\r\n  const accessToken = Spotify.getAccessToken();\r\n  const headers = {Authorization: `Bearer ${accessToken}` };\r\n  let userId;\r\n\r\n  return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n  ).then(response => response.json()\r\n  ).then (jsonResponse => {\r\n     userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \r\n      {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`http://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n              headers: headers,\r\n              method: 'POST',\r\n              body: JSON.stringify({uris: trackUris})\r\n          })\r\n      })\r\n    });\r\n\r\n  }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}