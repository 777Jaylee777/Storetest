{"ast":null,"code":"const clientId = '966170e49781462f9b0f4dff0b7fd5d7';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing us to grab a new access token when it expires\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}\n        `;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}\n    `, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris || trackUris.length === 0) return;\n    const userUrl = 'https://api.spotify.com/v1/me';\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId = undefined;\n    let playlistId = undefined;\n    fetch(userUrl, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => userId = jsonResponse.id).then(() => {\n      const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n      fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => playlistId = jsonResponse.id).then(() => {\n        const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        fetch(addPlaylistTracksUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","savePlaylist","trackUris","length","userUrl","userId","undefined","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"sources":["C:/Users/Jayle/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId = '966170e49781462f9b0f4dff0b7fd5d7';\r\nconst redirectUri = 'http://localhost:3000/'\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n        return accessToken;\r\n    }\r\n\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        //This clears the parameters, allowing us to grab a new access token when it expires\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n    } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}\r\n        `;\r\n        window.location = accessUrl;\r\n    }\r\n  },\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}\r\n    `, { headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n    }\r\n}).then(response => {\r\n    return response.json();\r\n}).then(jsonResponse => {\r\n    if (!jsonResponse.tracks) {\r\n        return [];\r\n    }\r\n    return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artist[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n    }));\r\n});\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris || trackUris.length === 0) return;\r\n    const userUrl = 'https://api.spotify.com/v1/me';\r\n    const headers = {\r\n      Authorization: `Bearer ${accessToken}`\r\n    };\r\n    let userId = undefined;\r\n    let playlistId = undefined;\r\n    fetch(userUrl, {\r\n      headers: headers \r\n    })\r\n    .then(response => response.json())\r\n    .then(jsonResponse => userId = jsonResponse.id)\r\n    .then(() => {\r\n      const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n      fetch(createPlaylistUrl, {\r\n          method: 'POST',\r\n          headers: headers,\r\n          body: JSON.stringify({\r\n            name: name\r\n          })\r\n        })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => playlistId = jsonResponse.id)\r\n        .then(() => {\r\n          const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\r\n          fetch(addPlaylistTracksUrl, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({\r\n              uris: trackUris\r\n            })\r\n          });\r\n        })\r\n    })\r\n  }\r\n};\r\n\r\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module"}